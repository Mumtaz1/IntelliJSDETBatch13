Collections framework:
    Collections framework is just a collection of interfaces and classes that have many methods to
    store and manipulate real-life day to day data.

Why we should learn Collections framework:
    Collections framework contains the classes that have pre-built methods to store and manipulate
    the data. These methods are battle tested (tested under extreme conditions - very well tested -
    something we can rely on. Something we can use in production environment).

How can we use the Collections framework:
    They are same classes just like any other class in Java. We create the object of the class and
    can start calling the methods. We just need to take care of the diamond operator. We put the
    name of the class inside the diamond operator <> whose objects we will be storing inside these
    classes e.g., for Strings and ArrayList the syntax is ArrayList<String> objName = new ArrayList<>();

What are wrapper classes?
    They are special classes built to work with collections framework which are replica of primitive data
    types but they are classes which means we can use them just like any other class we can have methods.

*** Boxing and unboxing in wrapper classes:
    When we convert a primitive data type like int to a non-primitive wrapper class like Integer we call
    it boxing. This conversion can happen automatically and we can also call explicit methods to convert
    primitives to non-primitives.
    In the case of auto its called auto boxing and in autoboxing we just assign the data, and it is
    converted automatically while in simple we need to call a method to convert it.
    Unboxing and auto-unboxing is simply the reverse of this (conversion of non-primitive to primitive).

Some downsides - not that down:
    1. We need to use the wrapper classes with collections framework.
    2. int num vs. integer num wrapper classes occupy 4 times more memory as compared to primitive.
       But as a tester we don't need to wr=orry too much about these wrapper classes.

==============================================================================
List is the first interface that we will be discussing from the collections framework.
List:
    1. We can store duplicate data.
    2. Insertion order is maintained.

ArrayList:
LinkedList Class:
Joining in a minute
Difference between ArrayList and LinkedList:
ArrayList:
    Upside:Retrieval (get operation) of elements is super fast because all data is stored in consecutive order.
    Downside: Adding elements in the middle or start will be very expensive because a lot of shifting
              needs to be done.

LinkedList:
    Upside: Whenever we have to insert the data randomly not at the last index we should be using  LinkedList.
    Downside: Retrieval is super, super slow if the list is big.


