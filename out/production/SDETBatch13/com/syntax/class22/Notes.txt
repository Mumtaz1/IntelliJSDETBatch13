What is method Overloading in Java:
    With the help of method overloading we can have many methods with the same name but
    different parameters in a class.

Why we should use method overloading?
    1. Cleaner code if multiple methods are doing the same thing we don't need to come
       up with different names.
    2. Flexibility for the end-user.

How we can use Method overloading in Java?
    We can overload a method by changing three things:
    1. Number of parameters
    2. Change the data type of parameters
    3. We can change the sequence of parameters.

class Calculator {

int sum(int num1, int num) {
return num1 + num2;
}
}
int sum(int num1, int num2, int num3) {
return num1 + num2 + num3;
}
}
double sum(int num1, int num2, int num3) {
return num1 + num2 + num3;
}
}

Rules:
1. Method names should be same but parameters should be different.
2. We can't overload a method by just changing its return type.
3. We can also overload constructors by following the same rules

=====================================================

What is Method Overriding?
    It happens when same method exists inside the parent class and
    the child class.

Why we should override a method?
    If we are inheriting from a Parent class and we don't like the
    implementation of a method from the parent class we can provide
    our own implementation. Sometimes, it is done to improve the
    performance of code.

How we can use override a method?
    When we inherit from a class we just need to rewrite that method
    inside the child class. All should be same except the body and
    access modifiers.

Rules:
    1. For override we must inherit from a class.
    2. The method in the parent class that we want to override must
       be exactly the same as the method in the child class. Only
       the access modifiers can be different.
    3. The access modifiers in the parent class can only be
       increased with respect to the visibility for e.g., we can
       change default to protected or to public but we cannot
       make it private.
    4. If something is not inherited we can't override it e.g.,
       private methods and constructors.
    5.



